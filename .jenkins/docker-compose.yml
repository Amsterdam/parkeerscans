version: '2.1'
services:
  database:
    image: build.datapunt.amsterdam.nl:5000/atlas/postgres:latest
    # build: ../postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: insecure
      POSTGRES_USER: predictiveparking
      POSTGRES_DB: predictiveparking
    volumes:
      - databasevolume:/tmp
      - data-volume:/app/data

  elasticsearch:
    image: build.datapunt.amsterdam.nl:5000/atlas/elasticsearch5
    command: elasticsearch -Ehttp.host=0.0.0.0 -Etransport.host=127.0.0.1 -Epath.repo=/tmp
    environment:
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
    volumes:
      - ./backups/elasticsearch:/tmp/backups

  logstash:
    image: build.datapunt.amsterdam.nl:5000/datapunt/predictive_parking_logstash:${ENVIRONMENT}
    # build: ../logstash
    volumes:
      - data-volume:/app/data
    links:
      - database:database
      - elasticsearch:elasticsearch
    environment:
      TABLE:

  importer:
    image: build.datapunt.amsterdam.nl:5000/datapunt/predictive_parking:${ENVIRONMENT}
    # build: ../api/
    links:
      - database:database
      #- elasticsearch:elasticsearch
    environment:
      DATABASE_NAME: predictiveparking
      DATABASE_USER: predictiveparking
      DATABASE_PASSWORD: insecure
      PARKEERVAKKEN_OBJECTSTORE_PASSWORD:
      PGPASSWORD: insecure
      TESTING:
      DATAPUNT_API_URL: ${DATAPUNT_API_URL:-https://api.data.amsterdam.nl/}
    user: root
    volumes:
      - data-volume:/app/data
      - unzip-volume:/app/unzipped

  csvimporter:
    image: build.datapunt.amsterdam.nl:5000/datapunt/predictive_parking_csvpgvoer:${ENVIRONMENT}
    # build: ../csvimporter/
    links:
      - database:database
    environment:
      DATABASE_NAME: predictiveparking
      DATABASE_PASSWORD: insecure
      TESTING:
      DATAPUNT_API_URL: ${DATAPUNT_API_URL:-https://api.data.amsterdam.nl/}
    volumes:
      - unzip-volume:/app/unzipped

  # backup ALL
  db-backup:
    image: build.datapunt.amsterdam.nl:5000/atlas/postgres
    # build: ../postgres
    links:
      - database
    environment:
      PGPASSWORD: insecure
    volumes:
      - ./backups:/tmp/backups
    command: >
      bash -c "echo database:5432:predictiveparking:predictiveparking:insecure > ~/.pgpass \
              && chmod 600 ~/.pgpass \
              && pg_dump --clean \
                          -Fc \
                          -t wegdelen* \
                          -t mvp \
                          -t metingen* \
                          -t scans* \
                          -t django_migrations  \
                          -T auth*    \
                          -U predictiveparking \
                          -h database -p 5432 \
                          predictiveparking > /tmp/backups/database.dump"

  # incemental
  db-backup-scans:
    image: build.datapunt.amsterdam.nl:5000/atlas/postgres
    # build: ../postgres
    links:
      - database
    environment:
      PGPASSWORD: insecure
    volumes:
      - ./backups:/tmp/backups
    command: >
      bash -c "echo database:5432:predictiveparking:predictiveparking:insecure > ~/.pgpass \
              && chmod 600 ~/.pgpass \
              && pg_dump -t scans* \
                          -Fc \
                          -U predictiveparking \
                          -h database -p 5432 \
                          predictiveparking > /tmp/backups/scans.dump \
              && pg_dump -t wegdelen* \
                          -U predictiveparking \
                          -h database -p 5432 \
                          predictiveparking > /tmp/backups/wegdelen.dump"

  el-backup:
    image: build.datapunt.amsterdam.nl:5000/atlas/elasticsearch
    links:
      - elasticsearch
    volumes:
      - ./backups/elasticsearch:/tmp/backups
    user: root
    command: >
      bash -c "chmod -R 777 /tmp/backups  \
              && rm -f /tmp/backups/* \
              && curl -X PUT http://elasticsearch:9200/_snapshot/backup -d '{ \"type\": \"fs\", \"settings\": { \"location\": \"/tmp/backups\" }}' \
              && curl -X PUT http://elasticsearch:9200/_snapshot/backup/scans?wait_for_completion=true -d '{ \"indices\": \"scan*\" }'"

volumes:
  data-volume:
  unzip-volume:
  databasevolume:
